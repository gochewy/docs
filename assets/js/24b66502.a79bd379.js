(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{107:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),l=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(t),b=a,u=d["".concat(o,".").concat(b)]||d[b]||m[b]||i;return t?r.a.createElement(u,s(s({ref:n},p),{},{components:t})):r.a.createElement(u,s({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},78:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return l}));var a=t(3),r=t(7),i=(t(0),t(107)),o={title:"Postgres migrations"},s={unversionedId:"pg-diff-migrations",id:"pg-diff-migrations",isDocsHomePage:!1,title:"Postgres migrations",description:"pg-diff Library",source:"@site/docs/pg-diff-migrations.md",slug:"/pg-diff-migrations",permalink:"/docs/pg-diff-migrations",version:"current"},c=[{value:"<code>pg-diff</code> Library",id:"pg-diff-library",children:[]}],p={toc:c};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"pg-diff-library"},Object(i.b)("inlineCode",{parentName:"h2"},"pg-diff")," Library"),Object(i.b)("p",null,"In any project that involves saving files and information in a database requires some mechanism\nto migrate tables or data as most of the time teams have development environment where tables\nare created and then code is deployed to the production environment. Database in production\nneeds to know about the new tables created to hold new information after code change.\nAll the changes required to be reflected on target database  are managed by database migrations."),Object(i.b)("p",null,"Our project has a service named ",Object(i.b)("inlineCode",{parentName:"p"},"Directus"),", that we can use for content management.\n",Object(i.b)("inlineCode",{parentName:"p"},"Directus")," can work with Postgres database to save information about users, activities,\nfiles and sessions. We have other services too, that use Postgres database to save information\nlike Hasura GraphQL engine. Hasura comes with inbuilt migration feature that creates and applies\nmigrations for all the changes happening in the database, but Directus has no such\nfunctionality to create migrations for a database. "),Object(i.b)("p",null,"We use library named ",Object(i.b)("inlineCode",{parentName:"p"},"Pg-Diff-Cli")," to create and apply migrations,\nThis library has its own problems too.\nSo, we have forked the library and made some changes to make it work according to our needs.\nWe use this library\nas Docker Image and run it as a container.  It is available at Docker Hub page for\n",Object(i.b)("a",{parentName:"p",href:"https://hub.docker.com/r/ephemerecreative/pg-diff"},"Ephemere Creative"),".\nCreate container using the latest available image.\nFor example, "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"migrations:\n    image: ephemerecreative/pg-diff:v0.0.6\n    volumes:\n      - ./content/pg-diff-config.json:/app/pg-diff-config.json\n      - ./content/migrations:/app/migrations \n")),Object(i.b)("p",null,"When running the docker container, it recognizes two different commands, ",Object(i.b)("inlineCode",{parentName:"p"},"create-migrations"),"\nand ",Object(i.b)("inlineCode",{parentName:"p"},"run-migrations")," . First command can create migrations on source machine by comparing the source\ndatabase with a temporary database. For example something like\n",Object(i.b)("inlineCode",{parentName:"p"},"docker-compose run --rm image_name create-migrations"),". Second command, ",Object(i.b)("inlineCode",{parentName:"p"},"run-migrations"),"\napplies migrations on target database. We need to make sure that ",Object(i.b)("inlineCode",{parentName:"p"},"pg-diff-config.json"),"\nfile is properly defined."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "development": {\n    "sourceClient": { //source database properties\n      "host": "host_address",\n      "port": 5432, //or other port number if any\n      "database": "postgres",\n      "user": "user",\n      "password": "password_here",\n      "applicationName": "pg-diff-cli"\n    },\n    "targetClient": { //target database properties\n      "host": "host_address",\n      "port": 5432,\n      "database": "temporary_database_name",\n      "user": "postgres",\n      "password": "password",\n      "applicationName": "pg-diff-cli"\n    },\n    "compareOptions": {\n      "author": "Swarn",\n      "outputDirectory": "migrations",\n      "getAuthorFromGit": false,\n      "schemaCompare": {\n        "namespaces": ["public"],\n        "dropMissingTable": true,\n        "dropMissingView": false,\n        "dropMissingFunction": false,\n        "dropMissingAggregate": false,\n        "roles": []\n      },\n      "dataCompare": {\n        "enable": true, //should be false if not comparing data\n        "tables": [\n          {\n            "tableName": "table1",\n            "tableSchema": "public",\n            "tableKeyFields": ["id"]\n          },\n          ...more tables\n        ]\n      }\n    },\n    "migrationOptions": {\n      "patchesDirectory": "migrations",\n      "historyTableName": "migration",\n      "historyTableSchema": "public"\n    }\n  }\n')),Object(i.b)("p",null,"Few things  to remember in terms of configuration is to define ",Object(i.b)("inlineCode",{parentName:"p"},"database")," in ",Object(i.b)("inlineCode",{parentName:"p"},"targetClient"),"\nsection before creating migration is to name the temporary database that does not exist already.\n",Object(i.b)("inlineCode",{parentName:"p"},"sourceClient")," section of the configuration file is the database we would like to generate\nmigrations from.\nData can also be exported from one database to the another one by\nsetting the ",Object(i.b)("inlineCode",{parentName:"p"},"dataCompare")," option to ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"\nand then providing the array of the tables we want to export data from. In our case of ",Object(i.b)("inlineCode",{parentName:"p"},"Directus"),",\nthat will be all the Directus tables."),Object(i.b)("p",null,"Configuration file can have multiple instance of configuration based on the scenario.\nRight now , ",Object(i.b)("inlineCode",{parentName:"p"},"development")," is where we add database information about source database and\nname and ports for a temporary database.\n",Object(i.b)("inlineCode",{parentName:"p"},"local")," is when we apply migrations and define database properties there.\nMigrations files are generated and saved in migrations directory.",Object(i.b)("br",{parentName:"p"}),"\n","When ",Object(i.b)("inlineCode",{parentName:"p"},"run-migrations")," is run , it will check for the patch files in the migration directory,\nLibrary keeps track of all the applied migrations in ",Object(i.b)("inlineCode",{parentName:"p"},"migrations")," table in a database. "))}l.isMDXComponent=!0}}]);