(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{107:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(c,".").concat(m)]||u[m]||b[m]||i;return n?a.a.createElement(d,o(o({ref:t},s),{},{components:n})):a.a.createElement(d,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(107)),c={title:"Meilisearch"},o={unversionedId:"components/meilisearch/meilisearch",id:"components/meilisearch/meilisearch",isDocsHomePage:!1,title:"Meilisearch",description:"Meilisearch is open source, fast search engine that can be used with our projects.",source:"@site/docs/components/meilisearch/meilisearch.md",slug:"/components/meilisearch/meilisearch",permalink:"/docs/components/meilisearch/meilisearch",version:"current"},l=[{value:"Setting Up Server",id:"setting-up-server",children:[]},{value:"Creating the client",id:"creating-the-client",children:[]}],s={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Meilisearch is open source, fast search engine that can be used with our projects.\nThis guide is going to explain using Meilisearch with ",Object(i.b)("inlineCode",{parentName:"p"},"NestJS")," backend project,\nwhich can serve Web and Expo App with search results for queries through GraphQL",Object(i.b)("br",{parentName:"p"}),"\n","endpoints and Hasura. The whole integration of meilisearch is as following"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Set Up meilisearch server."),Object(i.b)("li",{parentName:"ol"},"Set up client for meilisearch in NestJS backend"),Object(i.b)("li",{parentName:"ol"},"Setup client to query, update, insert and delete documents from meilisearch database"),Object(i.b)("li",{parentName:"ol"},"Set Hasura actions to query the search from NestJS api."),Object(i.b)("li",{parentName:"ol"},"Use query (Hasura Queries) to fetch data by providing search query as a variable."),Object(i.b)("li",{parentName:"ol"},"Use Hasura events to insert, update and delete entries from Meilisearch")),Object(i.b)("h2",{id:"setting-up-server"},"Setting Up Server"),Object(i.b)("p",null,"We will be setting up Meilisearch server using Docker(why not!!!).\nUsing Docker it is easy to have Meilisearch server up and running along with all our other services.\nIn Docker compose file add the following, "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"search:\n    image: getmeili/meilisearch\n    container_name: meili\n    restart: always\n    volumes:\n      - meilisearch_data:/data.ms\n    environment:\n      MEILI_MASTER_KEY: <any-string-as-master-key>\n    ports:\n      - 7700:7700\n")),Object(i.b)("p",null,"and add ",Object(i.b)("inlineCode",{parentName:"p"},"meilisearch_data")," in volumes section of docker file "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-yaml"},"volumes:\n  ......\n  meilisearch_data:\n")),Object(i.b)("p",null,"When we run docker-compose up , meilisearch will be available at  ",Object(i.b)("inlineCode",{parentName:"p"},"http://localhost:7700/"),"\nThe next thing is to create ",Object(i.b)("inlineCode",{parentName:"p"},"index")," in meilisearch. Index is like a table where we store all our\nrecords as a document. Documents are basic building blocks of meilisearch data.",Object(i.b)("br",{parentName:"p"}),"\n","We can create an ",Object(i.b)("inlineCode",{parentName:"p"},"index")," using curl, but recommended is Postman to set up indexes and check updates on meilisearch.\nTo create ",Object(i.b)("inlineCode",{parentName:"p"},"index")," using Postman, do a ",Object(i.b)("inlineCode",{parentName:"p"},"POST")," request on endpoint  "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"http://localhost:7700/indexes\n")),Object(i.b)("p",null,"in body (json format) add following"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-json"},'{\n  "uid": "todos",\n  "primaryKey": "id"\n}\n')),Object(i.b)("p",null,"Remember! if ",Object(i.b)("inlineCode",{parentName:"p"},"MEILI_MASTER_KEY")," is set in Docker configuration, you need it to create index or perform queries.\nSet ",Object(i.b)("inlineCode",{parentName:"p"},"X-Meili-API-Key")," with the value of master key , or get public or private keys from a server using\n",Object(i.b)("inlineCode",{parentName:"p"},"GET")," request on"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"http://localhost:7700/keys\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"uid")," is to tell meilisearch what the name of index is going to be.\nAll documents have a primary key, which is a mandatory ",Object(i.b)("em",{parentName:"p"},"field"),". This field is composed of a\nprimary key ",Object(i.b)("em",{parentName:"p"},"attribute")," name and a unique value. All documents in a given index share the same\nprimary key attribute but a different unique value. Primary can be any unique value in all the documents.\nIt can be user id for an index containing all the users as a document. "),Object(i.b)("h2",{id:"creating-the-client"},"Creating the client"),Object(i.b)("p",null,"Our services can interact with meilisearch server through api calls or using ",Object(i.b)("inlineCode",{parentName:"p"},"meilisearch"),"\nJavaScript library. We will be using ",Object(i.b)("inlineCode",{parentName:"p"},"npm")," package called ",Object(i.b)("inlineCode",{parentName:"p"},"meilisearch"),"  .\ninstall it using ",Object(i.b)("inlineCode",{parentName:"p"},"yarn")," in ",Object(i.b)("inlineCode",{parentName:"p"},"NestJS")," backend directory called ",Object(i.b)("inlineCode",{parentName:"p"},"server"),". "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-shell"},"yarn add meilisearch\n")),Object(i.b)("p",null,"Now create a new file in your directory, where we will initialize meilisearch client.\nIt should look like the following"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"import { MeiliSearch } from 'meilisearch';\nconst client = new MeiliSearch({\n  host: 'http://localhost:7700/',\n  apiKey: '<public key here that we get from http://localhost:7700/keys>',\n});\n\nexport default client;\n")),Object(i.b)("p",null,"We can do search using this client as shown below"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},"const searchResponse = await client.index('todos').search(query, {\n      filters: `userId = <userId>`,\n      attributesToHighlight: ['title'],\n    });\n")),Object(i.b)("p",null,"In the code above, todos is the index we are making our queries on. ",Object(i.b)("inlineCode",{parentName:"p"},"query")," is the search term we\nare sending to the server. ",Object(i.b)("inlineCode",{parentName:"p"},"filters")," are used to filter results from the search hits we get.\nIt can be simple string, or we can also use arithmetic relations to filter out the results.\nBelow is complex query using filters where we only want Batman movies released after\nthe 18 of March 1995, and directed by either Tim Burton or Christopher Nolan,\nthen you would use this filter"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-javascript"},'filters: \'release_date > 795484800 AND (director = "Tim Burton" OR director = "Christopher Nolan")\'\n')),Object(i.b)("p",null,"More options that can be passed along the query string can be found in the official documentation\nof meilisearch ",Object(i.b)("a",{parentName:"p",href:"https://docs.meilisearch.com/reference/features/search_parameters.html"},"here"),".\nAll the results returned from the search can be found in a response at ",Object(i.b)("inlineCode",{parentName:"p"},"searchResponse.hits")," and we can use these results as we like."))}p.isMDXComponent=!0}}]);